/*
 * mini_project.c
 *
 *  Created on: Jan 30, 2024
 *      Author: hassan
 */

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

unsigned char g_timer1_int_flag =0; /* flag to be set to 1 if timer1 CTC matches the compare value */
unsigned char g_secs=0;      /* variable that represents the seconds in stop watch*/
unsigned char g_mins=0;     /* variable that represents the minutes in stop watch*/
unsigned char g_hours=0;   /* variable that represents the hours in stop watch*/

#define SECONDS_COUNTER_LIMIT 59
#define MINUTES_COUNTER_LIMIT 59
#define HOURS_COUNTER_LIMIT 23

ISR(TIMER1_COMPA_vect)
{
    g_timer1_int_flag=1;   /* flag is set to 1 when timer1 finished counting up to 1 second */
}



void Timer1_Init(void)
{
    TCNT1=0;    /* Timer1 initial value=0 */

    TCCR1A|=(1<<FOC1A); /* Use compare non-pwm comp mode on channel A*/

    /*
     *   WGM12 to select ctc mode on channel A
     *   CS10 CS12 to select clock source with Fcpu/1024(prescaler)
     */

    TCCR1B|=(1<<WGM12)|(1<<CS10)|(1<<CS12);


    OCR1A=976;  /*Compare match value to count up to 1 second */


    TIMSK|=(1<<OCIE1A); /* enable Timer1A compare mode interrupt */

}

/* function to control the 6 seven segment */
void Display_Digits(void)
{
	/*
	 *  sSArray[0]=g_secs%10 to display the units in g_secs
	 *  sSArray[1]=g_secs/10 to display the tens in g_secs
	 *  sSArray[2]=g_mins%10 to display the units in g_mins
	 *  sSArray[3]=g_mins/10 to display the tens in g_mins
	 *  sSArray[4]=g_hours%10 to display the units in g_hours
	 *  sSArray[5]=g_hours/10 to display the tens in g_hours
	 */
	unsigned char i;
	unsigned char sSArray[6]={g_secs%10,g_secs/10,g_mins%10,g_mins/10,\
	g_hours%10,g_hours/10};

	/*
	 * This loop controls the 6 seven-segment components
	 * The first 6 pins in PORTC form PA0 to PA5 used to enable which component is currently displaying
	 * The first 4 pins in PORTC from PC0 to PC3 are selection pins to pass the desired number to 7-segment
	 * The 2ms delay is to give the illusion that all 6 7-Segments are working at the same time
	 *
	 */
	for(i=0;i<6;i++)
	{
		PORTA=(1<<i);
		PORTC=(PORTC&0xF0)|(sSArray[i]&0x0F);
		_delay_ms(2);

	}
}


/*
 * Initializing interrupt0 will be used to reset the stop watch
 */
void Int0_Init(void)
{
	/*
	 * Setting PD2 as input pin
	 * Activate pull up resistor on that pin
	 * Initializing interrupt0 to sense falling edge when the push button is pressed
	 * Enable external interrupt on PD2
	 *
	 */

	DDRD&=~(1<<PD2);
	PORTD|=(1<<PD2);
	MCUCR|=(1<<ISC01);
	GICR|=(1<<INT0);
}

/* When reset push button is pressed (INT0)  */
ISR(INT0_vect)
{
  /* Reset all the watch counters  */
  TCNT1=0;
  g_secs=0;
  g_mins=0;
  g_hours=0;
  PORTC&=0xF0;
  _delay_ms(30); /* delay for push button debouncing  */
}

/*Initializing interrupt1 will be used to pause stop watch */
void INT1_Init(void)
{
	/*
	 * Setting PD3 as input pin
	 * Use external pull down resistor on that pin
	 * Initializing interrupt1 to sense rising edge when the push button is pressed
	 * Enable external interrupt on PD3
	 */

	DDRD&=~(1<<PD3);
	MCUCR|=(1<<ISC10)|(1<<ISC11);
	GICR|=(1<<INT1);
}

/* When the pause button is pressed (INT1) */
ISR(INT1_vect)
{

	TCCR1B&=~(1<<CS10)&~(1<<CS11)&~(1<<CS12); /*Disable the clock source */

}


/*Initialize interrupt2 will be used to resume the stop watch  */
void INT2_Init(void)
{
	/*
	 * Setting PB2 as input pin
	 * Activate pull up resistor on that pin
	 * Initializing interrupt0 to sense falling edge when the push button is pressed
     * Enable external interrupt on PB2
	 */
	DDRB&=~(1<<PB2);
	PORTB|=(1<<PB2);
	MCUCSR&=~(1<<ISC2);
	GICR|=(1<<INT2);
}
/* When the resume button is pressed (INT2) */
ISR(INT2_vect)
{
	/*
	 * check if the clock source bits is cleared in the TCCR1B
	 * when true it means the PAUSE button has been pressed
	 * then start the timer1 clock
	 */
	if( !( TCCR1B&(1<<CS10) )&&!(TCCR1B&(1<<CS12)) )
	{
		Timer1_Init();
	}


}
int main(void)
{
    DDRA=0x3f; /*Set pins from PA0 to PA5 as output */
    DDRC=0x0f; /* Set pins from PC0 to PC 3 as	 */
    SREG|=(1<<7); /*Enable global interrupt by setting the I-bit */
    Timer1_Init();
    Int0_Init();
    INT1_Init();
    INT2_Init();
    while(1)
    {
      Display_Digits(); /* Function to display on seven segment */


      if(g_timer1_int_flag==1) /*check if the interrupt flag is set (one second passed) */
      {
    	  /*/
    	   * check if the seconds counter reached the limit (59)
    	   */
    	  if(SECONDS_COUNTER_LIMIT==g_secs)
    	  {
    		  g_secs=0; /*Clear seconds counter */
    		  g_mins++; /*Increment the minutes counter */
    	  }
    	  else
    	  {
    		  g_secs++; /*Increment the seconds if not reached the limit (59) */
    	  }


          /*Check if the minutes counter exceeded the limit (59) */
    	  if(MINUTES_COUNTER_LIMIT<g_mins)
    	  {
    		  g_mins=0; /*Clear the minutes counter */
    		  g_hours++; /*Increment if not exceeded the limit */
    	  }


          /*Check if not exceeded the limit */
    	  if(HOURS_COUNTER_LIMIT<g_hours)
    	  {
    		  g_hours=0; /*Clear the hours counter */
    	  }
    	  g_timer1_int_flag=0; /*Clear the interrupt flag */
      }
    }

}
